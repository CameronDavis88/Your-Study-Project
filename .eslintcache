[{"/root/The-Study-App/src/index.js":"1","/root/The-Study-App/src/App.js":"2","/root/The-Study-App/src/reportWebVitals.js":"3","/root/The-Study-App/src/ducks/store.js":"4","/root/The-Study-App/src/routes.js":"5","/root/The-Study-App/src/ducks/reducer.js":"6","/root/The-Study-App/src/components/Header/Header.js":"7","/root/The-Study-App/src/components/About/About.js":"8","/root/The-Study-App/src/components/Login-Register/Login.js":"9","/root/The-Study-App/src/components/Journal/Journal.js":"10","/root/The-Study-App/src/components/Notes/Notes.js":"11","/root/The-Study-App/src/components/Profile/Profile.js":"12","/root/The-Study-App/src/components/Quotes/Quotes.js":"13","/root/The-Study-App/src/components/Journal/Entry.js":"14","/root/The-Study-App/src/components/Notes/Note.js":"15","/root/The-Study-App/src/components/Quotes/Quote.js":"16"},{"size":786,"mtime":1615319316400,"results":"17","hashOfConfig":"18"},{"size":222,"mtime":1615319316396,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1615319316400,"results":"20","hashOfConfig":"18"},{"size":104,"mtime":1615319316400,"results":"21","hashOfConfig":"18"},{"size":727,"mtime":1615319316400,"results":"22","hashOfConfig":"18"},{"size":608,"mtime":1615319316400,"results":"23","hashOfConfig":"18"},{"size":2298,"mtime":1615319316396,"results":"24","hashOfConfig":"18"},{"size":429,"mtime":1615319316396,"results":"25","hashOfConfig":"18"},{"size":4019,"mtime":1615319316400,"results":"26","hashOfConfig":"18"},{"size":3014,"mtime":1615319316400,"results":"27","hashOfConfig":"18"},{"size":2910,"mtime":1615319316400,"results":"28","hashOfConfig":"18"},{"size":6409,"mtime":1615319316400,"results":"29","hashOfConfig":"18"},{"size":3043,"mtime":1615319316400,"results":"30","hashOfConfig":"18"},{"size":1245,"mtime":1615319316396,"results":"31","hashOfConfig":"18"},{"size":2289,"mtime":1615319316400,"results":"32","hashOfConfig":"18"},{"size":1295,"mtime":1615319316400,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"zrp0n4",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/root/The-Study-App/src/index.js",[],["71","72"],"/root/The-Study-App/src/App.js",[],"/root/The-Study-App/src/reportWebVitals.js",[],"/root/The-Study-App/src/ducks/store.js",[],"/root/The-Study-App/src/routes.js",[],"/root/The-Study-App/src/ducks/reducer.js",[],"/root/The-Study-App/src/components/Header/Header.js",[],"/root/The-Study-App/src/components/About/About.js",[],"/root/The-Study-App/src/components/Login-Register/Login.js",[],"/root/The-Study-App/src/components/Journal/Journal.js",["73"],"import axios from 'axios'\nimport Entry from './Entry'\nimport { connect } from 'react-redux'\nimport { useState, useEffect } from 'react'\nimport { getUser } from '../../ducks/reducer'\nimport './Journal.css'\n\nconst Journal = props => {\n\n    const [journal, setJournal] = useState([])\n    const [entry, setEntry] = useState('')\n    const [addView, setAddView] = useState(false)\n\n    const getJournal = () => {\n        const id = props.user.user_id\n        axios.get(`/api/journal/${id}`)\n            .then(res => {\n                setJournal(res.data)\n            })\n            .catch(err => console.log(err))\n    }\n    const createEntry = () => {\n        const id = props.user.user_id\n        axios.post(`/api/entry/${id}`, { entry })\n            .then(() => {\n                setEntry('')\n                getJournal()\n                addViewFalse()\n            })\n            .catch(err => console.log(err))\n    }\n\n    const loggedinView = () => {\n        if (!props.user.user_id) {\n            props.history.push('/')\n        }\n    }\n\n\n    useEffect(() => {\n        getJournal()\n        loggedinView()\n    }, [])\n\n    const addViewTrue = () => {\n        setAddView(true)\n    }\n\n    const addViewFalse = () => {\n        setAddView(false)\n    }\n\n    const mappedJournal = journal.map(entry => {\n        return <Entry\n            key={entry.entry_id}\n            entry={entry}\n            getJournal={getJournal}\n            className='entry'\n        />\n    })\n\n    return (\n\n        <div className='journal-page'>\n            <section className='content'>\n                {addView\n                    ? (\n                        <>\n                            <div className='entry-input-box'>\n                                <div className='title-box' >\n                                    <h2 className='journal-title'>New Entry</h2>\n                                </div>\n                                <button onClick={addViewFalse}>Return to Journal</button>\n                                <textarea\n                                    rows='5'\n                                    cols='100'\n                                    className='entry-input-text'\n                                    value={entry}\n                                    onChange={e => setEntry(e.target.value)} />\n                                <button onClick={createEntry} >Add Entry</button>\n                            </div>\n                        </>\n                    )\n                    :\n                    <main>\n                        <div className='title-box' >\n                            <h2 className='journal-title'>Your Journal</h2>\n                        </div>\n                        <button className='add-view' onClick={addViewTrue}>Add New Entry</button>\n                        {mappedJournal}\n                    </main>\n                }\n            </section>\n        </div>\n    )\n}\n\nconst mapStateToProps = reduxState => reduxState;\n\nexport default connect(mapStateToProps, { getUser })(Journal);\n\n","/root/The-Study-App/src/components/Notes/Notes.js",["74"],"import axios from 'axios'\nimport Note from './Note'\nimport { connect } from 'react-redux'\nimport { useState, useEffect } from 'react'\nimport { getUser } from '../../ducks/reducer'\nimport './Notes.css'\n\nconst Notes = props => {\n    const [notes, setNotes] = useState([])\n    const [note, setNote] = useState('')\n    const [addView, setAddView] = useState(false)\n\n    const getNotes = () => {\n        const id = props.user.user_id\n        axios.get(`/api/notes/${id}`)\n            .then(res => {\n                setNotes(res.data)\n            })\n            .catch(err => console.log(err))\n    }\n\n    const createNote = () => {\n        const id = props.user.user_id\n        axios.post(`/api/note/${id}`, { note })\n            .then(() => {\n                setNote('')\n                getNotes()\n                addViewFalse()\n            })\n            .catch(err => console.log(err))\n    }\n\n    const loggedinView = () => {\n        if (!props.user.user_id) {\n            props.history.push('/')\n        }\n    }\n\n    useEffect(() => {\n        loggedinView()\n        getNotes()\n    }, [])\n\n    const addViewTrue = () => {\n        setAddView(true)\n    }\n\n    const addViewFalse = () => {\n        setAddView(false)\n    }\n\n    const mappedNotes = notes.map(note => {\n        return <Note\n            key={note.note_id}\n            note={note}\n            getNotes={getNotes}\n            className='note'\n        />\n    })\n\n    return (\n\n        <div className='notes-page'>\n            <section className='content'>\n                {addView\n                    ?\n                    <>\n                        <div className='note-input-box'>\n                            <div className='title-box' >\n                                <h2 className='notes-title'>New Note</h2>\n                            </div>\n                            <button onClick={addViewFalse}>Return to Notes</button>\n                            <textarea\n                                rows='5'\n                                cols='100'\n                                type='text'\n                                className='note-input-text'\n                                value={note}\n                                onChange={e => setNote(e.target.value)} />\n                            <button onClick={createNote} >Add Note</button>\n                        </div>\n                    </>\n\n                    :\n                    <main>\n                        <div className='title-box' >\n                            <h2 className='notes-title'>Your Notes</h2>\n                        </div>\n                        <button className='add-view' onClick={addViewTrue}>Add New Note</button>\n                        {mappedNotes}\n                    </main>\n                }\n            </section>\n        </div>\n    )\n}\n\nconst mapStateToProps = reduxState => reduxState;\n\nexport default connect(mapStateToProps, { getUser })(Notes);\n","/root/The-Study-App/src/components/Profile/Profile.js",["75"],"import { Component } from 'react'\nimport axios from 'axios'\nimport { withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getUser } from '../../ducks/reducer'\nimport './Profile.css'\n\nclass Profile extends Component {\n    constructor(props) {\n        super(props)\n\n        const { username, email, password } = this.props.user\n        this.state = {\n            username: username,\n            email: email,\n            password: password,\n            verPassword: '',\n            editingView: false\n\n        }\n    }\n\n    loggedinView = () => {\n        if (!this.props.user.user_id) {\n            this.props.history.push('/')\n        }\n    }\n\n    componentDidMount() {\n        this.loggedinView()\n        getUser()\n    }\n\n    editView = () => {\n        this.setState({ editingView: true })\n    }\n\n    homeView = () => {\n        this.setState({ editingView: false })\n    }\n\n    handleInput = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n\n    editUsername = () => {\n        const id = this.props.user.user_id\n        const username = this.state.username\n        axios.put(`/api/user/${id}`, { username })\n            .then(res => {\n                this.setState({ username: res.data.username })\n                alert('Username Updated')\n            })\n            .catch(err => console.log(err));\n    }\n\n    editPassword = () => {\n        const id = this.props.user.user_id\n        const { password, verPassword } = this.state\n\n        if (password && password === verPassword) {\n            axios.put(`/api/user_password/${id}`, { password })\n                .then(res => {\n                    this.setState({ password: res.data.password })\n                    alert('Password Updated')\n                })\n                .catch(err => console.log(err))\n        } else {\n            alert(\"Passwords don't match\")\n        }\n    }\n\n    editEmail = () => {\n        const id = this.props.user.user_id\n        const email = this.state.email\n        axios.put(`/api/user_email/${id}`, { email })\n            .then(res => {\n                this.setState({ email: res.data.email })\n                alert('Email Updated')\n            })\n            .catch(err => console.log(err));\n    }\n\n    toJournal = () => {\n        this.props.history.push('/journal')\n    }\n\n    toNotes = () => {\n        this.props.history.push('/notes')\n    }\n\n    toQuotes = () => {\n        this.props.history.push('/quotes')\n    }\n\n    render() {\n        return (\n            <div className='home-page'>\n                <section className='authentication-info'>\n                    {this.state.editingView\n                        ? (\n                            <>\n                                <section className='updating-box'>\n                                    <h3 className='update-title'>Update Your Info</h3>\n                                    <div className='update-username-box'>\n                                        <input\n                                            className='inputs'\n                                            value={this.state.username}\n                                            name='username'\n                                            placeholder='Username'\n                                            onChange={e => this.handleInput(e)} />\n\n                                        <button onClick={this.editUsername}>Update</button>\n                                    </div>\n                                    <div className='update-username-box'>\n                                        <input className='inputs'\n                                            value={this.state.email}\n                                            name='email'\n                                            placeholder='Email'\n                                            onChange={e => this.handleInput(e)} />\n                                        <button onClick={this.editEmail}>Update</button>\n                                    </div>\n\n                                    <input\n                                        value={this.state.password}\n                                        className='inputs'\n                                        name='password'\n                                        type='password'\n                                        placeholder='Password'\n                                        onChange={e => this.handleInput(e)} />\n                                    <button onClick={this.editPassword}>Update</button>\n                                    <h1></h1>\n                                  \n                                    <input\n                                        value={this.state.verPassword}\n                                        className='inputs'\n                                        name='verPassword'\n                                        type='password'\n                                        placeholder='Verify Password'\n                                        onChange={e => this.handleInput(e)} />\n                                </section>\n                                <button onClick={this.homeView} className='finished'>Finished Updating</button>\n                            </>\n                        )\n                        : <div className='profile-display'>\n                            <div className='user-update'>\n                                <div className='title-box' >\n                                    <h2 className='username'>Welcome to Your Desk</h2>\n                                </div>\n                                <div className='title-box' >\n                                    <h3 onClick={this.editView} className='update'>-update your info here-</h3>\n                                </div>\n                            </div>\n                            <div className='link-box'>\n                                <h2 className='notes' onClick={this.toNotes} >Notes</h2>\n                                <h2 className='journal' onClick={this.toJournal}>Journal</h2>\n                                <h2 className='quotes' onClick={this.toQuotes}>Quotes</h2>\n                            </div>\n                        </div>\n                    }\n                </section>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = reduxState => reduxState;\n\nexport default withRouter(connect(mapStateToProps, { getUser })(Profile));\n\n","/root/The-Study-App/src/components/Quotes/Quotes.js",["76"],"import axios from 'axios'\nimport { connect } from 'react-redux'\nimport { useState, useEffect } from 'react'\nimport { getUser } from '../../ducks/reducer'\nimport Quote from './Quote'\nimport './Quotes.css'\n\nconst Quotes = props => {\n    const [quotes, setQuotes] = useState([])\n    const [quote, setQuote] = useState('')\n    const [addView, setAddView] = useState(false)\n\n    const getQuotes = () => {\n        const id = props.user.user_id\n        axios.get(`/api/quotes/${id}`)\n            .then(res => {\n                setQuotes(res.data)\n            })\n            .catch(err => console.log(err))\n    }\n\n    const createQuote = () => {\n        const id = props.user.user_id\n        axios.post(`/api/quote/${id}`, { quote })\n            .then(() => {\n                setQuote('')\n                getQuotes()\n                addViewFalse()\n            })\n            .catch(err => console.log(err))\n    }\n\n    const loggedinView = () => {\n        if (!props.user.user_id) {\n            props.history.push('/')\n        }\n    }\n\n    useEffect(() => {\n        loggedinView()\n        getQuotes()\n    }, [])\n\n    const addViewTrue = () => {\n        setAddView(true)\n    }\n\n    const addViewFalse = () => {\n        setAddView(false)\n    }\n\n    const mappedQuotes = quotes.map(quote => {\n        return <Quote\n            key={quote.quote_id}\n            quote={quote}\n            getQuotes={getQuotes}\n            className='quote'\n        />\n    })\n\n    return (\n\n        <div className='quotes-page'>\n            <section className='content'>\n                {addView\n                    ? (\n                        <>\n                            <div className='quote-input-box'>\n                                <div className='title-box' >\n                                    <h2 className='quotes-title'>New Note</h2>\n                                </div>\n                                <button onClick={addViewFalse}>Return to Quotes</button>\n                                <textarea\n                                    rows='5'\n                                    cols='100'\n                                    type='text'\n                                    className='quote-input-text'\n                                    value={quote}\n                                    onChange={e => setQuote(e.target.value)} />\n                                <button onClick={createQuote} >Add Quote</button>\n                            </div>\n                        </>\n                    )\n                    :\n                    <main>\n                        <div className='title-box' >\n                            <h2 className='quotes-title'>Your Quotes</h2>\n                        </div>\n                        <button className='add-view' onClick={addViewTrue}>Add New Quote</button>\n                        {mappedQuotes}\n                    </main>\n                }\n            </section>\n        </div>\n    )\n}\n\nconst mapStateToProps = reduxState => reduxState;\n\nexport default connect(mapStateToProps, { getUser })(Quotes);\n\n\n\n\n","/root/The-Study-App/src/components/Journal/Entry.js",[],"/root/The-Study-App/src/components/Notes/Note.js",[],"/root/The-Study-App/src/components/Quotes/Quote.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":43,"column":8,"nodeType":"83","endLine":43,"endColumn":10,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":42,"column":8,"nodeType":"83","endLine":42,"endColumn":10,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":132,"column":37,"nodeType":"89","endLine":132,"endColumn":41},{"ruleId":"81","severity":1,"message":"90","line":42,"column":8,"nodeType":"83","endLine":42,"endColumn":10,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getJournal' and 'loggedinView'. Either include them or remove the dependency array.","ArrayExpression",["94"],"React Hook useEffect has missing dependencies: 'getNotes' and 'loggedinView'. Either include them or remove the dependency array.",["95"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'getQuotes' and 'loggedinView'. Either include them or remove the dependency array.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [getJournal, loggedinView]",{"range":"103","text":"104"},"Update the dependencies array to be: [getNotes, loggedinView]",{"range":"105","text":"106"},"Update the dependencies array to be: [getQuotes, loggedinView]",{"range":"107","text":"108"},[1109,1111],"[getJournal, loggedinView]",[1082,1084],"[getNotes, loggedinView]",[1099,1101],"[getQuotes, loggedinView]"]